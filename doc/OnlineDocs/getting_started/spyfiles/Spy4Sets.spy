"""
David L. Woodruff and Mingye Yang, Spring 2018
Code snippets for Set.rst in testable form
"""
from pyomo.environ import *
model = ConcreteModel()
model.A = Set()

model.B = Set(dimen=2)

def DoubleA_init(m):
    return ['red', 'green', 'blue']

model.C = Set(initialize=DoubleA_init)

model.D = Set(initialize=['red', 'green', 'blue'])

model.E = Set(model.A)

model.F = Set(model.A, dimen=3)

model.G = RangeSet(1.5, 10, 3.5)

model.I = model.A | model.D # union
model.J = model.A & model.D # intersection
model.K = model.A - model.D # difference
model.L = model.A ^ model.D # exclusive-or

model.K = model.B * model.C

model.K = Set(within=model.B * model.C)

model.C = Set(model.A * model.B)

model.C = Set(within=model.A * model.B)

model.M = Set(within=NegativeIntegers)

model.Nodes = Set()

model.arcs = model.Nodes*model.Nodes

model.Arcs = Set(within=model.Nodes*model.Nodes)

model.Arcs = Set(dimen=2)


def kv_init(model):
    return ((k,v) for k in model.K for v in model.V[k])
model.KV=Set(dimen=2, initialize=kv_init)


from pyomo.environ import *

model = AbstractModel()

model.I=Set()
model.K=Set()
model.V=Set(model.K)

def kv_init(model):
    return ((k,v) for k in model.K for v in model.V[k])
model.KV=Set(dimen=2, initialize=kv_init)

model.a = Param(model.I, model.K)

model.y = Var(model.I)
model.x = Var(model.I, model.KV)

#include a constraint
#x[i,k,v] <= a[i,k]*y[i], for i in model.I, k in model.K, v in model.V[k]

def c1Rule(model,i,k,v):
   return model.x[i,k,v] <= model.a[i,k]*model.y[i]
model.c1 = Constraint(model.I,model.KV,rule=c1Rule)

model.MyConstraint = Constraint(model.I,model.KV,rule=c1Rule)

